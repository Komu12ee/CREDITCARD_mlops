name: CI/CD MLOps Pipeline (DSMP Project)

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allows manual triggering from the GitHub Actions tab

permissions:
  contents: read # Required to checkout the code
  # CRITICAL OIDC CHANGE: Granting permission to request the ID token
  id-token: write 

jobs:
  #####################################################################
  # JOB 1: Continuous Integration (CI) - Code Quality & Testing
  #####################################################################
  integration:
    name: Continuous Integration Checks
    runs-on: ubuntu-latest
    steps:
      # FIX: Corrected indentation for the first step
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # Using the custom token, as you preferred (remember the security risks!)
          token: ${{ secrets.anushka_mlops }} 

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' 

      - name: Install dependencies (Pipelines/Testing)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Lint code
        run: echo "Linting repository: Running Flake8/Black/etc. checks..."

      - name: Run unit and component tests
        run: echo "Running unit tests: Running pytest..."

  #####################################################################
  # JOB 2: Build & Tag Docker Image (OIDC IMPLEMENTED)
  #####################################################################
  build-and-tag-image:
    name: Build & Tag Docker Image (OIDC Auth)
    needs: integration 
    runs-on: ubuntu-latest
    
    outputs:
      image_uri: ${{ steps.build-image.outputs.image_uri }} 

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # OIDC STEP: Configure AWS credentials using an IAM Role ARN (temporary credentials)
      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # The IAM Role ARN that GitHub is trusted to assume (replace with your AWS ID)
          role-to-assume: arn:aws:iam::123456789012:role/github-oidc-role 
          aws-region: ${{ secrets.AWS_REGION }} # Still need to get region from secret
          # No access keys required! This is the security improvement.

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        # This step automatically uses the temporary OIDC credentials from the previous step!

      - name: Set Environment Variables
        id: env_setup
        run: |
          # Use the commit SHA for a unique, reproducible tag
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV 
          echo "ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY_NAME }}" >> $GITHUB_ENV
          # Use the ECR registry output for the full path
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV

      - name: Build, Tag, and Push Image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        run: |
          FULL_IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          echo "--- Docker build started for $FULL_IMAGE_URI ---"
          docker build -t $FULL_IMAGE_URI .
          
          echo "--- Pushing image to ECR... ---"
          docker push $FULL_IMAGE_URI
          
          # Set the output for the next job (CD)
          echo "image_uri=$FULL_IMAGE_URI" >> $GITHUB_OUTPUT 
          echo "--- Push to ECR successful! ---"

  #####################################################################
  # JOB 3: Continuous Deployment (CD) - Deploy to Runner (MOCKED)
  #####################################################################
  continuous-deployment:
    name: Continuous Deployment (Self-Hosted Script)
    runs-on: self-hosted
    needs: build-and-tag-image 
    
    steps:
      - name: Deploy Container on Self-Hosted Runner
        env:
          # Referencing the image URI from the previous job using the new output syntax
          IMAGE_URI: ${{ needs.build-and-tag-image.outputs.image_uri }} 
          
        run: |
          echo "--- Starting deployment for image: $IMAGE_URI ---"
          
          # 1. Pull the newly pushed image from ECR (requires self-hosted runner to have AWS access)
          # Note: The self-hosted runner needs 'aws configure' or instance profile role to pull from ECR.
          docker pull $IMAGE_URI

          # 2. Delete Previous Container
          docker rm -f creditcard || true

          # 3. Run New Container
          docker run -d -p 8080:8080 --ipc="host" --name=creditcard $IMAGE_URI

          echo "--- Deployment complete! Service running on port 8080. ---"
